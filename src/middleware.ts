import { NextResponse } from "next/server";import type { NextRequest } from "next/server";import { fetchFromServer } from "@/lib/fetchFromServer";import { cookies } from "next/headers";type ParsedCookie = {    access: string;    Path: string;    Expires: Date;    HttpOnly: boolean | undefined;    SameSite: boolean | "lax" | "strict" | "none" | undefined;}function parseCookie(cookieString: string):ParsedCookie {    return cookieString.split('; ').reduce((acc, cookie) => {        const [key, value] = cookie.split('=');        acc[key] = value;        return acc;    }, {});}export async function middleware(req: NextRequest) {    const cookie = await cookies();    const access = cookie.get('access')?.value;    const refresh = cookie.get('refresh')?.value;    console.log(req.nextUrl.pathname)    if(access && refresh && ['/', '/signup', '/signin'].includes(req.nextUrl.pathname)){        return NextResponse.redirect(new URL('/dashboard', req.url));    }    if(!access && refresh){        const refreshResponse = await fetchFromServer('account/refresh', 'POST')            if(refreshResponse.ok) {                const access = refreshResponse.headers.get('Set-Cookie');                const response = NextResponse.next();                const parsedCookie = parseCookie(access);                response.cookies.set('access', parsedCookie?.access, {                    httpOnly: true,                    path: parsedCookie.Path,                    expires: new Date(Date.now() + 1800 * 1000),                    sameSite: 'strict'                });                return response;            }    }}export const config = {    matcher: [        '/((?!api|_next/static|_next/image|favicon.ico).*)',    ],};